{"version":3,"sources":["api.js","store.js","User.js","Post.js","Comments.js","CommentList.js","PostList.js","App.js","index.js"],"names":["API_URL","store","createStore","state","action","type","Object","objectSpread2","posts","loadingButton","visibleContent","filter","post","id","idPost","map","comments","comment","idComment","applyMiddleware","thunk","connect","deletePost","_ref","name","email","city","react_default","a","createElement","Fragment","className","href","onClick","Post","title","body","src_User","deleteComment","key","CommentsList","src_Comments","PostList","filterPost","length","item","src_Post","user","address","CommentList","loadPosts","dispatch","_ref2","postsList","usersList","commentsList","allList","regenerator_default","async","_context","prev","next","awrap","Promise","all","fetch","concat","then","responce","json","sent","slicedToArray","find","userId","str","postId","stop","_useState","useState","_useState2","valueInput","setValue","searchInText","trim","toLowerCase","includes","value","onChange","event","target","onKeyDown","src_PostList","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.683befaf.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getPosts = () => fetch(`${API_URL}posts`)\n  .then(responce => responce.json());\n\nexport const getUsers = () => fetch(`${API_URL}users`)\n  .then(responce => responce.json());\n\nexport const getComments = () => fetch(`${API_URL}comments`)\n  .then(responce => responce.json());\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { getPosts, getUsers, getComments } from './api';\n\nconst ACTION_TYPE_SET_POSTS = 'SET_POSTS';\nconst ACTION_TYPE_START_LOADING = 'START_LOAADING';\nconst ACTION_TYPE_CHANGE_CONTENT = 'CHANGE_CONTENT';\nconst ACTION_TYPE_DELETE_POST = 'DELETE_POST';\nconst ACTION_TYPE_DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = posts => ({\n  type: ACTION_TYPE_SET_POSTS,\n  posts,\n});\n\nexport const startLoading = () => ({\n  type: ACTION_TYPE_START_LOADING,\n});\n\nexport const changeContent = () => ({\n  type: ACTION_TYPE_CHANGE_CONTENT,\n});\n\nexport const deletePost = idPost => ({\n  type: ACTION_TYPE_DELETE_POST,\n  idPost,\n});\n\nexport const deleteComment = idComment => ({\n  type: ACTION_TYPE_DELETE_COMMENT,\n  idComment,\n});\n\nexport const loadPosts = () => {\n  return async(dispatch) => {\n    dispatch(startLoading());\n\n    const [postsList, usersList, commentsList] = await\n    Promise.all([getPosts(), getUsers(), getComments()]);\n\n    const allList = postsList.map(post => ({\n      ...post,\n      user: usersList.find(user => user.id === post.userId),\n      comments: commentsList.filter(str => str.postId === post.id),\n    }));\n\n    dispatch(setPosts(allList));\n    dispatch(changeContent());\n  };\n};\n\nconst initialState = {\n  posts: [],\n  loadingButton: 'Load list of posts',\n  visibleContent: false,\n};\n\nconst rootReduce = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPE_SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case ACTION_TYPE_START_LOADING:\n      return {\n        ...state,\n        loadingButton: 'Loading...',\n      };\n    case ACTION_TYPE_CHANGE_CONTENT:\n      return {\n        ...state,\n        visibleContent: true,\n      };\n    case ACTION_TYPE_DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.id !== action.idPost),\n      };\n    case ACTION_TYPE_DELETE_COMMENT:\n      return {\n        ...state,\n        posts: state.posts.map(post => ({\n          ...post,\n          comments: post.comments\n            .filter(comment => comment.id !== action.idComment),\n        })),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReduce, initialState, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deletePost } from './store';\n\nconst User = ({ name, email, city, idPost, deletePost }) => (\n  <>\n    <div className=\"userInfo\">\n      {' Name: '}\n      <span className=\"userInfo__name\">\n        {name}\n      </span>\n      <span className=\"userInfo__email\">\n        {' Email: '}\n        <a href=\" \">\n          {email}\n        </a>\n      </span>\n      <span className=\"userInfo__adress\">\n        {' Sity: '}\n        <a href=\" \">\n          {city}\n        </a>\n      </span>\n    </div>\n    <button\n      type=\"button\"\n      className=\"button-delete\"\n      onClick={() => deletePost(idPost)}\n    >\n      Delete post\n    </button>\n  </>\n);\n\nUser.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  deletePost: PropTypes.func.isRequired,\n  idPost: PropTypes.number.isRequired,\n};\n\nconst makeStateToProps = state => ({\n  state: state.posts,\n});\n\nexport default connect(\n  makeStateToProps,\n  { deletePost }\n)(User);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\n\nconst Post = ({ title, body, name, email, city, idPost }) => (\n  <>\n    <h2 className=\"post__title\">\n      {title}\n    </h2>\n    <p className=\"post__body\">\n      {`\"`}\n      {body}\n      {`\"`}\n    </p>\n    <User\n      name={name}\n      email={email}\n      city={city}\n      idPost={idPost}\n    />\n  </>\n);\n\nPost.propTypes = {\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  city: PropTypes.string.isRequired,\n  idPost: PropTypes.number.isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from './store';\n\nconst Comments = ({ comment, deleteComment }) => (\n  <li key={comment.id}>\n    <h3 className=\"comment__name\">\n      {comment.name}\n    </h3>\n    <button\n      type=\"button\"\n      className=\"button-delete\"\n      onClick={() => deleteComment(comment.id)}\n    >\n      Delete comment\n    </button>\n    <p className=\"comment__body\">\n      {comment.body}\n    </p>\n    <div className=\"comment__sender\">\n      {'Sender: '}\n      <a href=\" \">\n        {comment.email}\n      </a>\n    </div>\n  </li>\n);\n\nComments.propTypes = {\n  comment: PropTypes.shape({\n    userId: PropTypes,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    body: PropTypes.string,\n  }).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nconst makeStateToProps = state => ({\n  posts: state.posts,\n})\n\nexport default connect(\n  makeStateToProps,\n  { deleteComment }\n)(Comments);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comments from './Comments';\n\nconst CommentsList = ({ comments }) => (\n  <>\n    <h2 className=\"comment__title\">\n  Comments:\n    </h2>\n    <ol type=\"1\">\n      {comments.map(comment => (\n        <Comments\n          comment={comment}\n        />\n      ))}\n    </ol>\n  </>\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\nimport CommentsList from './CommentList';\n\nconst PostList = ({ filterPost }) => (\n  <section className=\"postList\">\n    {filterPost.length > 0 ? filterPost.map(item => (\n      <div className=\"post\" key={item.id}>\n        <Post\n          title={item.title}\n          body={item.body}\n          name={item.user.name}\n          email={item.user.email}\n          city={item.user.address.city}\n          idPost={item.id}\n        />\n        <hr className=\"line\" />\n        <CommentsList comments={item.comments} />\n      </div>\n    )) : (<h3 className=\"postList__not-found\">Comment not found...</h3>)\n    }\n\n  </section>\n);\n\nPostList.propTypes = {\n  filterPost: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport PostList from './PostList';\nimport { loadPosts } from './store';\n\nfunction App({ posts, loadingButton, visibleContent, loadPosts }) {\n  const [valueInput, setValue] = useState('');\n\n  const setInputUsers = (event) => {\n    setValue(event.target.value);\n  };\n\n  const filterPost = () => {\n    const searchInText = valueInput.trim().toLowerCase();\n\n    if (valueInput.length === 0) {\n      return posts;\n    }\n\n    return posts.filter((post) => {\n      if ((post.body + post.title).toLowerCase().includes(searchInText)) {\n        return post;\n      }\n\n      return false;\n    });\n  };\n\n  return (\n    <div className=\"main\">\n      <h1 className=\"title\">Dynamic list of posts</h1>\n      {!visibleContent ? (\n        <button\n          type=\"button\"\n          onClick={loadPosts}\n          className=\"loadButton\"\n        >\n          {loadingButton}\n        </button>\n      ) : (\n        <>\n          <div className=\"input\">\n            <h2 className=\"input__title\">Search post: </h2>\n            <input\n              type=\"text\"\n              className=\"input__searсh\"\n              value={valueInput}\n              onChange={setInputUsers}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  return filterPost;\n                }\n              }}\n            />\n          </div>\n          <PostList\n            filterPost={filterPost()}\n          />\n        </>\n      )\n      }\n    </div>\n  );\n}\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  loadingButton: PropTypes.string.isRequired,\n  visibleContent: PropTypes.bool.isRequired,\n  loadPosts: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n  loadingButton: state.loadingButton,\n  visibleContent: state.visibleContent,\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    loadPosts,\n  }\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}